{"version":3,"sources":["token.js","components/LineChart.js","components/DataTable.js","components/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["AUTH_TOKEN","LineChart","props","canvasRef","React","createRef","this","myChart","data","labels","datas","map","d","publisherId","datasets","impressions_offered","update","Chart","current","type","options","maintainAspectRatio","label","fill","pointRadius","borderWidth","lineTension","backgroundColor","ref","Component","columns","title","dataIndex","key","DataTable","flatData","obj","index","dataSource","RangePicker","DatePicker","Dashboard","dateChangeHandler","event","start","_d","end","setState","startDate","endDate","loading","getData","headers","postRequest","_id","emailId","orgViewReq","organization","view","chartObject","metadata","img_thumbnail","chartType","dataLimit","requestParam","granularity","timeZone","name","location","dateRange","getTime","toString","xAxis","yAxis","approxCountDistinct","specialCalculation","filter","orderBy","metricOrdByList","id","desc","percentCalList","axios","post","then","response","result","state","defaultStart","defaultEnd","defaultStartDate","Date","defaultEndDate","direction","size","onChange","defaultValue","moment","spinning","style","padding","Header","Layout","Footer","Content","App","className","width","bottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8067bd62.chunk.js","sourcesContent":["export const AUTH_TOKEN =\r\n\t'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyLTJKNk1BU1lFNEJQc2xZclk5UWNKT1h2a1lmUFpZMmNLS0J2blVCUnRkRk40OUNvZVdPT25UeVBWYmVETURpNDBjQzdpTHdoK2loNDd4TzJObGlMYW1jeEUyTTVPZTRqaHRFaWs5U1NWak5iT1h3PT0iLCJpc3MiOiJyYWh1bGt1bWFyIiwiZXhwIjoxNjA1OTM3OTkxLCJpYXQiOjE2MDU4NTE1OTEsImp0aSI6ImY2NTFjOGVkMWQ5MWRkYzgwNzFlMTMxOWU4NWNmMWI4MGQ5MDQ2NmQyMDIxZTAwMTE0ZTc4ODhkYTA1NDBlYjM0YzI2ZTkwYjlkMzA2N2FmNWFkOGRmYjY5MGM2Mzg1MTA1MDZmN2M0YzZkYjU5ZDlhYTM1NjdjMDQyMTQ5OTMxN2QwMjJmOWZiYjc4NDQwZGI2ZjlmYjg2NmZhZjU5YzhlNjY0NWI3NjkwOTc3NzJhMjZmMTFmY2ZhM2M5YjEwZDQ2ZTM4ODk4ZTFhNTRmMDIzMjdhYjY0ZGU5MGEyYmE5MTdmZmJiN2NiYmVmZjk5Nzg4YmQ1MmNkYjAyZWMyYmEifQ.8XToAXRpZwkPxC8f_nqgSsCAOxEmJKZRcPw41308YFQ';\r\n","import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\n// LineChart\r\nclass LineChart extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.canvasRef = React.createRef();\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tthis.myChart.data.labels = this.props.datas.data.map((d) => d.publisherId);\r\n\t\tthis.myChart.data.datasets[0].data = this.props.datas.data.map((d) => d.impressions_offered);\r\n\t\tthis.myChart.update();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.myChart = new Chart(this.canvasRef.current, {\r\n\t\t\ttype: 'bar',\r\n\t\t\toptions: {\r\n\t\t\t\tmaintainAspectRatio: true\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\tlabels: this.props.datas.data.map((d) => d.publisherId),\r\n\t\t\t\tdatasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Publisher vs Impressions',\r\n\t\t\t\t\t\tdata: this.props.datas.data.map((d) => d.impressions_offered),\r\n\t\t\t\t\t\tfill: 'none',\r\n\t\t\t\t\t\tpointRadius: 2,\r\n\t\t\t\t\t\tborderWidth: 1,\r\n\t\t\t\t\t\tlineTension: 0,\r\n\t\t\t\t\t\tbackgroundColor: [\r\n\t\t\t\t\t\t\t'rgba(255, 99, 132, 0.2)',\r\n\t\t\t\t\t\t\t'rgba(54, 162, 235, 0.2)',\r\n\t\t\t\t\t\t\t'rgba(255, 206, 86, 0.2)',\r\n\t\t\t\t\t\t\t'rgba(75, 192, 192, 0.2)',\r\n\t\t\t\t\t\t\t'rgba(153, 102, 255, 0.2)',\r\n\t\t\t\t\t\t\t'rgba(255, 159, 64, 0.2)'\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <canvas ref={this.canvasRef} />;\r\n\t}\r\n}\r\n\r\nexport default LineChart;\r\n","import React, { Component } from 'react';\r\nimport { Table } from 'antd';\r\nconst columns = [\r\n\t{\r\n\t\ttitle: 'publisherId',\r\n\t\tdataIndex: 'publisherId',\r\n\t\tkey: 'publisherId'\r\n\t},\r\n\t{\r\n\t\ttitle: 'impressions_offered',\r\n\t\tdataIndex: 'impressions_offered',\r\n\t\tkey: 'impressions_offered'\r\n\t}\r\n];\r\n\r\nclass DataTable extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst flatData = this.props.datas.data;\r\n\t\tflatData.map((obj, index) => ({ ...obj, key: index + 1 }));\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Table columns={columns} dataSource={flatData} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default DataTable;\r\n","import React, { Component } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { DatePicker, Space } from 'antd';\r\nimport { AUTH_TOKEN } from '../token';\r\nimport axios from 'axios';\r\nimport LineChart from './LineChart';\r\nimport DataTable from './DataTable';\r\nimport moment from 'moment';\r\nimport { Spin } from 'antd';\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\nclass Dashboard extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tstartDate: null,\r\n\t\t\tendDate: null,\r\n\t\t\tdatas: null,\r\n\t\t\tdefaultStart: null,\r\n\t\t\tdefaultEnd: null,\r\n\t\t\tloading: false\r\n\t\t};\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tconst headers = {\r\n\t\t\t'X-Auth-Token': AUTH_TOKEN,\r\n\t\t\t'content-type': 'application/json'\r\n\t\t};\r\n\r\n\t\tconst postRequest = {\r\n\t\t\torganization: 'DemoTest',\r\n\t\t\tview: 'Auction'\r\n\t\t};\r\n\t\taxios.post('https://sigviewauth.sigmoid.io/api/v1/getDateRange', postRequest, { headers }).then((response) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tdefaultStart: response.data.result.startDate,\r\n\t\t\t\tdefaultEnd: response.data.result.endDate\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\tdateChangeHandler = (event) => {\r\n\t\tif (event) {\r\n\t\t\tlet start = event[0]._d;\r\n\t\t\tlet end = event[1]._d;\r\n\r\n\t\t\tthis.setState({ startDate: start, endDate: end, loading: true }, function () {\r\n\t\t\t\tthis.getData(start, end);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tgetData = (startDate, endDate) => {\r\n\t\tconst headers = {\r\n\t\t\t'X-Auth-Token': AUTH_TOKEN,\r\n\t\t\t'content-type': 'application/json'\r\n\t\t};\r\n\r\n\t\tconst postRequest = {\r\n\t\t\t_id: 'dashboard1516252439345',\r\n\t\t\temailId: 'candidate@sigmoid.com',\r\n\t\t\torgViewReq: {\r\n\t\t\t\torganization: 'DemoTest',\r\n\t\t\t\tview: 'Auction'\r\n\t\t\t},\r\n\t\t\tchartObject: {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\ttitle: 'chartobject:1516252439345',\r\n\t\t\t\t\timg_thumbnail: '../img/chart.png',\r\n\t\t\t\t\tchartType: 'table',\r\n\t\t\t\t\tdataLimit: 50\r\n\t\t\t\t},\r\n\t\t\t\trequestParam: {\r\n\t\t\t\t\tgranularity: 'hour',\r\n\t\t\t\t\ttimeZone: {\r\n\t\t\t\t\t\tname: 'UTC (+00:00)',\r\n\t\t\t\t\t\tlocation: 'UTC'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdateRange: {\r\n\t\t\t\t\t\tstartDate: startDate.getTime().toString(),\r\n\t\t\t\t\t\tendDate: endDate.getTime().toString()\r\n\t\t\t\t\t},\r\n\t\t\t\t\txAxis: ['D044'],\r\n\t\t\t\t\tyAxis: ['M002'],\r\n\t\t\t\t\tapproxCountDistinct: [],\r\n\t\t\t\t\tspecialCalculation: [],\r\n\t\t\t\t\tfilter: [],\r\n\t\t\t\t\torderBy: {\r\n\t\t\t\t\t\tmetricOrdByList: [{ id: 'M002', desc: true }]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tpercentCalList: []\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\taxios.post('https://sigviewauth.sigmoid.io/api/v1/getData', postRequest, { headers }).then((response) =>\r\n\t\t\tthis.setState({\r\n\t\t\t\tdatas: response.data.result,\r\n\t\t\t\tloading: false\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\trender() {\r\n\t\tconst defaultStartDate = new Date(this.state.defaultStart);\r\n\t\tconst defaultEndDate = new Date(this.state.defaultEnd);\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Space direction=\"vertical\" size={12}>\r\n\t\t\t\t\t<RangePicker\r\n\t\t\t\t\t\tonChange={this.dateChangeHandler}\r\n\t\t\t\t\t\tdefaultValue={[moment(defaultStartDate, 'YYYY/MM/DD'), moment(defaultEndDate, 'YYYY/MM/DD')]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Space>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<Spin spinning={this.state.loading} size=\"large\"></Spin>\r\n\t\t\t\t{this.state.datas ? <LineChart datas={this.state.datas} /> : 'No data available for graph'}\r\n\r\n\t\t\t\t<hr style={{ padding: '20px 0', backgroundColor: '#e0e0e0' }} />\r\n\t\t\t\t{this.state.datas ? <DataTable datas={this.state.datas} /> : 'No data Available for table'}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Dashboard;\r\n","import './App.css';\nimport Dashboard from './components/Dashboard';\nimport { Layout } from 'antd';\nconst { Header, Footer, Content } = Layout;\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Layout>\n\t\t\t\t<Header style={{ backgroundColor: '#e0e0e0' }}>SIGMOID DASHBOARD</Header>\n\t\t\t\t<Content>\n\t\t\t\t\t<Dashboard />\n\t\t\t\t</Content>\n\t\t\t\t<Footer style={{ width: '100%', bottom: 0, backgroundColor: '#e0e0e0' }}>Footer</Footer>\n\t\t\t</Layout>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}